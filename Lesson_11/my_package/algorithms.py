# Create by Bender
"""
Данный модуль позволяет работать с несколькими алгоритмами числовых последовательностей.
Алгоритм "without_00", позволяет узнать количество комбинацый из нулей и едениц, в которых нет двух нулей рядом.
Алгоритм "reverse_it", позволяет развернуть число задом на перёд, не используя списков строк и пр..
Алгоритм "count_first", позволяет вывести первые n членов монотонной последовательности,
в которой каждое натуральное число k встречается ровно k раз, например: 10 => 1, 2, 2, 3, 3, 3, 4, 4, 4, 4,
"""

__all__ = ["without_00", "reverse_it", "count_first"]


def without_00(zero: int, one: int) -> int:
    """
    Функция позволяет узнать количество комбинацый из нулей и едениц, в которых нет двух нулей рядом.
    :param zero: количество заданных нулей
    :param one:  количество заданных едениц
    :return:     возвращает количество комбинацый в которых нет двух нулей рядом
    """

    if zero > one + 1:
        return 0
    if zero == 0 or one == 0:
        return 1

    return without_00(zero, one - 1) + without_00(zero - 1, one - 1)


def reverse_it(user_num: int, reverse_num=0) -> int:
    """
    Функция позволяет развернуть число задом на перёд
    :param user_num:    целочисленное значение, которое вводит пользователь
    :param reverse_num: возвращает число задом на перёд
    :return:            возвращает результат
    """

    if user_num > 0:
        result = user_num % 10
        reverse_num = reverse_num * 10
        reverse_num = reverse_num + result
        return reverse_it(user_num // 10, reverse_num)
    else:
        return reverse_num


def count_first(user_num: int, nums="", i=1, j=1) -> str:
    """
    Функция позволяет позволяет вывести первые n членов монотонной последовательности
    :param user_num: целочисленное значение, которое вводит пользователь
    :param nums:     строка, в которую аккумулируются получаемые значения, в ходе работы функции
    :param i:        счётчик циклов, по умолчанию равен еденице
    :param j:        получаемое число в ходе работы одного цикла, по умолчанию равное еденице
    :return:         возвращает результат строку со значением, которое зависит от условия.
    """

    if user_num == 0:
        return ""

    if user_num == 1:
        return "1"

    if i == (user_num + 1):
        return nums

    if i == j * (j + 1) // 2:
        nums += str(j) + ", "
        j += 1
        i += 1
    else:
        nums += str(j) + ", "
        i += 1

    return count_first(user_num, nums, i, j)
